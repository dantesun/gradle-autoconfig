class ConfigUtils {

    public static final AUTO_CONFIG_SWITCH = "org.dsun.gradle.autoconfig"
    public static final String BUILD_SRC = "buildSrc"
    public static final String ROOT_PATH = ":"


    static boolean isAutoConfigurable(Project project) {
        if (isBuildSrc(project)) {
            return false
        }
        if (!("true" == project.properties.get(AUTO_CONFIG_SWITCH))) {
            project.logger.info("[GradleConfig][${project.name}] ${AUTO_CONFIG_SWITCH} is off.")
            return false
        }
        return true
    }

    static boolean isGloballyOff(Gradle g) {
        StartParameter parameter = g.getStartParameter()
        return "false" == parameter.getProjectProperties().get(AUTO_CONFIG_SWITCH)
    }

    static boolean isBuildSrc(Project project) {
        if (BUILD_SRC == project.name && ROOT_PATH == project.path) {
            project.logger.info("[GradleConfig][${project.name}] Gradle BuildSrc Project.")
            return true
        }
        return false
    }

    static boolean isRoot(Project project) {
        project.rootProject == project
    }
}

class RepositoryAutoConfiguration implements Action<Project> {
    public static final String NEXUS_REPO_NAME = "Nexus Mirror(Auto-Configured)"
    private boolean useMavenLocal = false

    @Override
    void execute(Project project) {
        def repoUrl = project.getProperties().get('nexus.mirror.url')
        def repoName = NEXUS_REPO_NAME
        project.logger.info("[GradleConfig][${project.name}] Nexus Mirror Url ${repoUrl ?: 'is not set.'}")
        if (!repoUrl) {
            repoUrl = RepositoryHandler.MAVEN_CENTRAL_URL
            repoName = RepositoryHandler.DEFAULT_MAVEN_CENTRAL_REPO_NAME
        }
        def configAction = { RepositoryHandler repositories ->
            if (useMavenLocal) {
                repositories.mavenLocal()
            } else {
                project.logger.info("[GradleConfig][${project.name}] Maven Local Repository is disabled.")
            }
            repositories.maven {
                url repoUrl
                name repoName
            }
        }
        if (!ConfigUtils.isRoot(project)) {
            project.logger.info("[GradleConfig][${project.name}] Setting up repositories.")
            project.repositories(configAction)
            return
        }

        project.logger.info("[GradleConfig][${project.name}] Setting up BuildScript repositories.")
        project.buildscript.repositories(configAction)

        project.logger.info("[GradleConfig][${project.name}] Setting up BuildScript/Plugin dependencies.")
        project.buildscript {
            dependencies {
                classpath "com.palantir.gradle.gitversion:gradle-git-version:0.12.3"
            }
        }
        if (project.childProjects.isEmpty()) {
            project.logger.info("[GradleConfig][${project.name}] Single Project Build")
            project.repositories(configAction)
        }
    }
}

class ProjectAutoConfiguration implements Action<Project> {

    private static final Logger logger = Logging.getLogger(ProjectAutoConfiguration)
    private final RepositoryAutoConfiguration REPO_AUTO_CONFIG = new RepositoryAutoConfiguration()

    @Override
    void execute(Project project) {
        if (!ConfigUtils.isAutoConfigurable(project)) {
            logger.info("[GradleConfig][${project.name}] Skip Project AutoConfiguration")
            project.extensions.extraProperties.set("autoconfig", false)
            return
        }
        REPO_AUTO_CONFIG.execute(project)
        if (ConfigUtils.isRoot(project)) {
            return
        }
        project.extensions.extraProperties.set("autoconfig", true)
        ["versioning", "project", "testing"].each { scriptName ->
            def scriptFile = project.gradle.rootProject.file("gradle/autoconfig/init.d/${scriptName}.gradle")
            project.logger.info("[GradleConfig][${project.name}] Applying: ${scriptFile.name} ")
            project.apply from: scriptFile
        }
    }

}


class GradleAutoConfigurationPlugin implements Plugin<Gradle> {
    @Override
    void apply(Gradle target) {
        if (ConfigUtils.isGloballyOff(target)) {
            logger.info("[GradleConfig] Gradle AutoConfiguration is globally disabled.")
            return
        }
        target.beforeProject(new ProjectAutoConfiguration())
    }

}

apply plugin: GradleAutoConfigurationPlugin
