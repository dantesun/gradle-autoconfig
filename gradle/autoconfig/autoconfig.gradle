class ConfigUtils {

    public static final AUTO_CONFIG_SWITCH = "org.dsun.gradle.autoconfig"
    public static final String BUILD_SRC = "buildSrc"
    public static final String ROOT_PATH = ":"

    static boolean isAutoConfigOn(Project project) {
        return "true" == project.properties.get(AUTO_CONFIG_SWITCH)
    }

    static boolean isAutoConfigurable(Project project) {
        if (isBuildSrc(project)) {
            project.logger.info("[GradleConfig] Skip ${project.name}")
            return false
        }
        if (!isAutoConfigOn(project)) {
            project.logger.info("[GradleConfig] ${AUTO_CONFIG_SWITCH} is off, skipping ${project.name}")
            return false

        }
        //Single project
        if (project.rootProject.allprojects.size() == 1) {
            return true
        }
        //The root project in a multi-project is not configurable
        if (project.depth == 0 && project.path == ":") {
            project.logger.info("[GradleConfig] skipping root project ${project.name}")
            return false
        }
        return true
    }

    static boolean isGloballyOff(Gradle g) {
        StartParameter parameter = g.getStartParameter()
        return "false" == parameter.getProjectProperties().get(AUTO_CONFIG_SWITCH)
    }

    static boolean isBuildSrc(Project project) {
        BUILD_SRC == project.name && ROOT_PATH == project.path
    }
}

class ConfigBuildScriptRepositories implements Action<Gradle> {

    @Override
    void execute(Gradle gradle) {
        config(gradle.rootProject)
    }

    private static void config(Project project) {
        def repositories = project.buildscript.repositories
        def mirrorUrl = project.getProperties().get('nexus.mirror.url')
        def setMavenRepo = { MavenArtifactRepository repo ->
            repo.name("Nexus Mirror")
            repo.url(mirrorUrl)
        }
        if (mirrorUrl) {
            repositories.maven(setMavenRepo)
        }
        def dependencies = project.buildscript.dependencies
        dependencies.add("classpath", "com.palantir.gradle.gitversion:gradle-git-version:0.12.3")
        project.logger.info("[GradleConfig][${project.name}] BuildScript initialization is done.")
    }

}

class ConfigProject implements Action<Project> {

    @Override
    void execute(Project project) {
        if (!ConfigUtils.isAutoConfigurable(project)) {
            return
        }
        project.logger.info("[GradleConfig][${project.name}] Configuring Project ...")
        ["versioning", "project", "repositories", "testing"].each { scriptName ->
            def scriptFile = project.rootProject.file("gradle/autoconfig/before.d/${scriptName}.gradle")
            project.logger.info("[GradleConfig][${project.name}] Applying script file: ${scriptFile.name} ")
            project.apply from: scriptFile
        }
    }
}


class GradleAutoConfigurationPlugin implements Plugin<Gradle> {
    private static final Logger logger = Logging.getLogger(GradleAutoConfigurationPlugin.class)

    @Override
    void apply(Gradle target) {
        if (ConfigUtils.isGloballyOff(target)) {
            logger.info("[GradleConfig] Gradle AutoConfiguration is globally disabled.")
            return
        }
        logger.info("[GradleConfig] Init Script Executing....")
        target.projectsLoaded(new ConfigBuildScriptRepositories())
        target.beforeProject(new ConfigProject())
    }

}

apply plugin: GradleAutoConfigurationPlugin
